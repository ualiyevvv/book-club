const ApiError = require('../error/ApiError')
const attendeeService = require('../services/attendeeService')
const qrcodeService = require('../services/qrcodeService')
const levelService = require('../services/levelService')
const userService = require('../services/userService')
const telegramService = require("../services/telegramService");
const voteService = require("../services/voteService");
const sequelize = require("../db");
// const {transaction} = require('sequelize')
class AttendeeController {

    async activate(req, res, next) {
        try {
            const {qrHash} = req.params;
            const userId = req.user.id;

            // console.log('\n\n\n\n',req ,'\n\n\n\n')


            const roomId = await qrcodeService.getRoomIdByQrHash(qrHash)

            // –≤—ã–Ω–µ—Å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç.–∫ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è. –∞ –º–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å —Ç.–∫ –ø–æ—Ç–æ–º —è –æ–±—Ä–∞—â–∞—é—Å—å –∑–∞ –≤—Å–µ–º–∏ –∞—Ç—Ç–µ–Ω–¥–∏–∏ —é–∑–µ—Ä–∞, –∞ —Ç.–µ —ç—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —è –æ–±—Ä–∞—â–∞—é—Å—å –∑–∞ –≤—Å–µ –∞—Ç—Ç–µ–Ω–¥–∏ —é–∑–µ—Ä–∞ —Ç–æ —è –æ–±—Ä–∞—â–∞—é—Å—å –∑–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const attendee = await attendeeService.create(roomId, userId)
            if (attendee === null) {
                return res.json({status: 'Already attend'})
            }
            await sequelize.transaction(async (t) => {
                const allAttendeesByUserId = (await attendeeService.getAllByUserId(userId)).attendees
                const levels = await levelService.getAllLevels();

                // TODO –ª–æ–≥–∏–∫—É –Ω–æ–≤–æ–≥–æ –ª–µ–≤–ª–∞ –ø–µ—Ä–µ–Ω—Å—Ç–∏ –≤ levelService
                const user = (await userService.getInsideUserById(userId)).dataValues;
                const newLevel = levels.find(level => level.dataValues.min_points === allAttendeesByUserId.length)
                const oldLevel = levels.find(level => level.dataValues.id === user.levelId)
                let oldScore = 1;
                if (oldLevel) {
                    oldScore = oldLevel.dataValues.level_score
                }
                if (newLevel) {
                    const userForUpdate = await userService.getInsideUserById(userId);
                    // const updatedLevelUser = await userService.updateLevel(newLevel.dataValues.id, userId, t);
                    userForUpdate.levelId = newLevel.dataValues.id
                    userForUpdate.save()
                    console.log('\n\n\n\n\nnewLevel.dataValues.level_score',newLevel.dataValues.level_score, '\n\n\n\n\n')

                    // –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞ —É –∫–æ—Ç–æ—Ä—ã—Ö end date > new Date, –æ–±–Ω–æ–≤–∏—Ç—å –≤ –Ω–∏—Ö –ø–æ–ª–µ score,
                    await voteService.scoresUpToNewLevel(userId, newLevel.dataValues.level_score, newLevel.dataValues.level_score-oldScore, t)
                    // –∞ —Ç–∞–∫–∂–µ offer id –≤—Å–µ—Ö —ç—Ç–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –Ω–∏—Ö total_scores,
                    // —Ç.–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ offers –≥–¥–µ user –≥–æ–ª–æ—Å–æ–≤–∞–ª –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∏—Ö total_scores, —Ä–∞–∑–Ω–∏—Ü—É newLevel score –∏ oldLevel score
                    // const


                    const user = await userService.getInsideUserById(userId);
                    const tgUsername = await telegramService.getUsernameByChatId(user.tg_id)
                    await telegramService.sendMessageToGroup(`üéâ –£—Ä–∞ üéâ \n\n–£ @${tgUsername} –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - <b>${newLevel.dataValues.name}</b>. \n\nüí• –í–µ—Å –≥–æ–ª–æ—Å–∞ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ ${newLevel.level_score}.  \n\n#levelup`)
                    // –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –µ—â–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? —é–∑–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ—Ä–æ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º,
                    // –Ω–æ –≤–µ–¥—å level id —Ç–∞–∫ –≤–∞–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ –≤—Ä–æ–¥–µ –Ω–µ—Ç. –Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å–≤–µ–∂–∏–π —É—Ä–æ–≤–µ–Ω—å
                    return res.json({level: newLevel})
                }

                return res.json({attendees_count: allAttendeesByUserId})
            })


        } catch (e) {
            next(ApiError.badRequest(e.message))
        }

    }


    // async getAllByRoomId(req, res) {
    //     let {room_id} = req.body
    //
    //     let attendees = await Attendee.findAndCountAll({ where: {room_id} })
    //
    //     return res.json(attendees)
    // }
    //
    // async getAllByUserId(req, res) {
    //     let {user_id} = req.body
    //
    //     let attendees = await Attendee.findAndCountAll({ where: {user_id} })
    //
    //     return res.json(attendees)
    // }
    //
    //
    // async getOne(req, res) {
    //     const {id} = req.params
    //     const attendee = await Attendee.findOne(
    //         {
    //             where: {id},
    //         }
    //     )
    //
    //     return res.json(attendee)
    // }


}

module.exports = new AttendeeController()