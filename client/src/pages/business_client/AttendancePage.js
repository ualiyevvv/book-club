import React, {useEffect, useState} from "react";
import {useNavigate, useParams} from "react-router-dom";
import {useAuth} from "../../app/AuthProvider";
import UserService from "../../app/services/UserService";
import Overlay from "../../shared/ui/overlay/Overlay";
import Loader from "../../shared/ui/loader/Loader";
import Modal from "../../shared/ui/modal/Modal";
import Typography from "../../shared/ui/typography/Typography";
import TelegramAttach from "../../features/telegram_attach/TelegramAttach";
import AppContainer from "./AppContainer";
import Block from "../../shared/ui/block/Block";
import Button from "../../shared/ui/button/Button";
import MyConfetti from "../../shared/confetti/Confetti";

export default function AttendancePage() {

    const navigate = useNavigate()

    const { qrHash } = useParams();
    const { user, isAuth, makeAttendee, isLoading } = useAuth();
    const [attendeeResponse, setAttendeeResponse] = useState(null)

    // –≤–æ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ —á–µ–º —ç—Ç–æ—Ç useeffect —Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —é–∑–µ—Ñ—Ñ–µ–∫—Ç??
    // —Ñ–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –≤–∞–∂–Ω–∞—è, –∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —é–∑ —ç—Ñ—Ñ–µ–∫—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –Ω–æ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–æ–ø–æ–Ω–µ–Ω—Ç–∞ –≤–ø–µ—Ä–≤—ã–µ,
    // —Ç–∞–∫ –≤–æ—Ç –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–∑–≤–∞–ª—Å—è —Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ª–∏ –æ–Ω –µ—Å–ª–∏ –¥–∞–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ –≤ –∫–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è,
    // –Ω–æ –≤ –∂—Å –º–Ω–æ–≥–æ–µ –Ω–µ–≤–∞–∂–Ω–æ –≤–µ–¥—å –æ–Ω –Ω–µ —Å—Ç—Ä–æ–≥–∏–π, –∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å variables lift –ø–æ–¥–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    const fetchData = async () => {
        try {
            const res = await UserService.attend(user.id, qrHash)
            setAttendeeResponse(res.data)
            // console.log('setAttendeeResponse', res.data)
        } catch (e) {
        }
    };

    useEffect( () => {
        const controller = new AbortController();
        const options = {
            signal: controller.signal,
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`,// Set the appropriate content type
                // You can add other headers if needed, e.g., authentication headers
            },
        };

        if (isAuth && user.tg_confirmed) {
            fetch(`http://localhost:3000/api/attendee/${qrHash}`, options)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Parse the response as JSON
                })
                .then(data => {
                    setAttendeeResponse(data)
                    // Handle the data from the response
                    // console.log(data);
                })
                .catch(error => {
                    // Handle any errors that occurred during the fetch
                    // console.error('Error:', error);
                });
        }

        return () => controller.abort();
    }, [])

    useEffect(() => {
        // console.log('attendeeResponse', attendeeResponse)
    }, [attendeeResponse]);


    if (!isAuth || !user) {
        return navigate('/authn')
    }

    if (isLoading || !attendeeResponse) {
        return <Overlay><Loader /></Overlay>
    }

    if (!user.tg_confirmed) {
        return (<Modal minWidth={340} maxWidth={600}>
                <Typography align={'center'} size={24} weight={700} bottom={20}>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è -></Typography>
                <TelegramAttach />
            </Modal>
        )
    }

    return (<>
        <AppContainer isBoxCentered={true} isHorizontalCenter={true}>
            {attendeeResponse?.level && <>
                <Modal minWidth={340} maxWidth={600}>
                    <Block isAlignCenter={true} bottom={20}>
                        <Typography align={'center'} size={24} weight={700}>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —É —Ç–µ–±—è –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ü•≥</Typography>
                    </Block>
                    <Block isAlignCenter={true} bottom={40}>
                        <Typography align={'center'} size={18} weight={500} bottom={10}>–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –≥–æ–ª–æ—Å –≤–µ—Å–∏—Ç {attendeeResponse?.level.level_score} –±–∞–ª–ª–æ–≤.</Typography>
                        <Typography align={'center'} size={18} weight={500}>–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üåü</Typography>
                    </Block>
                    <Block>
                        <Button onClick={() => navigate('/')} isBgLight={true} bottom={10}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</Button>
                    </Block>
                </Modal>
                <MyConfetti />
            </>}


            {attendeeResponse?.attendees_count && <>
                <Modal minWidth={340} maxWidth={600}>
                    <Block isAlignCenter={true} bottom={20}>
                        <Typography align={'center'} size={24} weight={700}>–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ</Typography>
                    </Block>
                    <Block isAlignCenter={true} bottom={40}>
                        <Typography align={'center'} size={18} weight={500} bottom={10}>–£—Ö—Ç—ã, —ç—Ç–æ —É–∂–µ —Ç–≤–æ–µ {attendeeResponse?.attendees_count.length} —É—á–∞—Å—Ç–∏–µ.</Typography>
                        <Typography align={'center'} size={18} weight={500}> –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å ü§ó</Typography>
                    </Block>
                    <Block>
                        <Button onClick={() => navigate('/')} isBgLight={true} bottom={10}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</Button>
                    </Block>
                </Modal>
                <MyConfetti />
            </>}

            {attendeeResponse?.status === 'Already attend' && <Modal minWidth={340} maxWidth={600}>
                <Block isAlignCenter={true} bottom={20}>
                    <Typography align={'center'} size={24} weight={700}>–£–ø—Å üôä</Typography>
                </Block>
                <Block isAlignCenter={true} bottom={40}>
                    <Typography align={'center'} size={18} weight={500} bottom={10}>–ü–æ—Ö–æ–∂–µ –≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ.</Typography>
                    <Typography align={'center'} size={18} weight={500}>–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º @mitxp (Ayan)</Typography>
                </Block>
                <Block>
                    <Button onClick={() => navigate('/')} isBgLight={true} bottom={10}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</Button>
                </Block>
            </Modal>}

            CHECK ATTENDEE
        </AppContainer>
    </>)
}