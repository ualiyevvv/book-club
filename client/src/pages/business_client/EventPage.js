import React, {useEffect, useState} from 'react';

import Box from '../../shared/ui/box/Box'
import NavigationPanel from '../../widgets/navigation_panel/NavigationPanel';

import {useNavigate, useParams} from "react-router-dom";
import Block from "../../shared/ui/block/Block";

import './eventPage.css'
import VoteTimer from "../../widgets/vote_timer/VoteTimer";
import CreateBook from "../../widgets/create_book/CreateBook";
import BookOffers from "../../widgets/book_offers/BookOffers";
import VoteViewSettings from "../../features/room/VoteViewSettings";
import useToggle from "../../hooks/useToggle";
import Button from "../../shared/ui/button/Button";
import SwiperCard from "../../widgets/SwiperCard/SwiperCard";
import FullScrollPage from "../../shared/ui/fullscroll/FullScrollPage";
import FullScrollPageContainer from "../../shared/ui/fullscroll/FullScrollPageContainer";
import Drawer from "../../shared/ui/drawer/Drawer";
import BookInfoWidget from "../../widgets/book_info/BookInfoWidget";
import BooksCounter from "../../widgets/books_counter/BooksCounter";
import Badge from "../../shared/ui/badge/Badge";
import Modal from "../../shared/ui/modal/Modal";
import CreatBookForm from "../../features/book/CreatBookForm";
import AppContainer from "./AppContainer";
import {useAuth} from "../../app/AuthProvider";

const EventPage = () => {

    const { adaptiveHandler } = useAuth();
    // const { user, isAuthenticated, userLoading, isOffline } = authHandler;
    const { device } = adaptiveHandler;

    const navigate = useNavigate()
    const { id:roomId } = useParams(); // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º id –≤ activeConversationId

    const [roomData, setRoomData] = useState(null)


    const [isActiveModal, toggle] = useToggle(false);
    const [voteViewSettingValue, setVoteViewSettingValue] = useState(localStorage.getItem('voteViewSettingValue') || null)

    const [isInViewport, setIsInViewport] = useState(false);


    const [books, setBooks] = useState([])
    const [isBooksLoaded, setIsBooksLoaded] = useState(false)

    const [activeSlide, setActiveSlide] = useState(0);
    const [isDrawerActive, setIsDrawerActive] = useState(true)

    const [isCreateBookModal, toggleCreateBookModal] = useToggle();

    const widthWindow = window.innerWidth;
    function getAllOffers() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
        fetch(`http://localhost:3000/api/offer/${roomId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
                }
                return response.json();
            })
            .then(data => {
                console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ BOOOOOKS:', data);
                const strinfiedBooks = []
                data.map(book => {
                    const newBook = {...book, info: JSON.parse(book.info)}
                    console.log('NEWEW BOOK', newBook)
                    strinfiedBooks.push(newBook);
                })
                setBooks(strinfiedBooks)
            })
            .catch(error => {
                console.error(error);
            });
        setIsBooksLoaded(true)
    }


    useEffect(() => {

        // –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
        fetch(`http://localhost:3000/api/room/${roomId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
                }
                return response.json();
            })
            .then(data => {
                console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
                setRoomData(data)
            })
            .catch(error => {
                console.error(error);
            });

        getAllOffers()



        // if (voteViewSettingValue === null) {
        //     toggle(true)
        // }

        // console.log("VOTEEEE", voteViewSettingValue)
    }, []);

    useEffect(() => {

        const observer = new IntersectionObserver(
            ([entry]) => {
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
                // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á—Ç–æ –ø–æ—Ç–æ–º –¥—Ä–∞–≤–µ—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —É—Å–ª–æ–≤–∏—è
                // –∞–∞–∞ –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Ö–æ–¥–∏—Ç, —Ç.–∫ —á–µ–∫ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø –µ–≥–æ —É–±–∏—Ä–∞–µ—Ç, –∏ –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è return –∫–æ—Ç–æ—Ä—ã–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ
                // –Ω—É–∂–Ω–æ –∑–Ω–∞—á–∏—Ç—å —á–µ–∫–Ω—É—Ç—å return –≤–Ω—É—Ç—Ä–∏ useEffect
                /// –ø–æ –∏–¥–µ–µ —Ö–æ—Ç—è, –¥—Ä–∞–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∂–µ –ø–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è, —Ç.–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–æ —Ö–∑, –Ω—É–∂–Ω–æ –¥–µ–±–∞–∂–∏—Ç—å
                // –Ω–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, —Ç.–∫ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ —ç–∫—Ä–∞–Ω–∞ –≤—Å–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —á–µ–∫–Ω—É—Ç—å, —ç—Ç–æ –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ –¥–ª—è ui –±–∏–±–ª—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–¥ –∫–ª—é—á –≤—Å–µ —á–µ—Ç–∫–æ —Ä–∞–±–æ—Ç–∞–ª–æ –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
                setIsInViewport(entry.isIntersecting);
            },
            {
                root: null, // null –æ–∑–Ω–∞—á–∞–µ—Ç viewport
                rootMargin: '0px', // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –≤–∞—à–∏ –Ω—É–∂–¥—ã
                threshold: 0.5, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            }
        );

        // –£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
        const target = document.getElementById('section-with-drawer'); // –ó–∞–º–µ–Ω–∏—Ç–µ 'your-section-id' –Ω–∞ ID –≤–∞—à–µ–π —Å–µ–∫—Ü–∏–∏
        if (target) {
            observer.observe(target);
        }

        // –û—Ç–º–µ–Ω–∏—Ç–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            if (target) {
                observer.unobserve(target);
            }
        };
        // console.log(widthWindow)
    }, [device]);


    // useEffect(() => {
    // }, []);


    return (
        <AppContainer>
            { (isActiveModal || voteViewSettingValue === null) && <VoteViewSettings title={'–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤'} onClick={setVoteViewSettingValue} onClose={toggle}/> }

            <div className="event-page">

                {device === 'desktop'
                    ? <>
                        <Block>
                            <VoteTimer data={roomData} />
                        </Block>

                        <Block isAlignCenter={true} bottom={30}>
                            <Block maxWidth={600} isAlignCenter={true}>
                                <Button bottom={10} onClick={toggle} width={'fit-content'} variant={'outline'} size={'small'}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Button>
                                <CreateBook roomId={roomId} />
                            </Block>
                        </Block>

                        <Block maxWidth={'100%'} isAlignCenter={true}>
                            <BookOffers voteViewSettingValue={voteViewSettingValue} roomId={roomId}/>
                        </Block>
                    </>
                    : <FullScrollPageContainer>
                        <FullScrollPage>
                            <Block>
                                <VoteTimer data={roomData} />
                            </Block>

                            <Block isAlignCenter={true} bottom={30}>
                                <Block maxWidth={600} isAlignCenter={true} padding={20}>
                                    <Button bottom={10} onClick={toggle} variant={'outline-white'}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Button>

                                    {isCreateBookModal && <Modal minWidth={360} maxWidth={480} height={'80%'} onClose={toggleCreateBookModal}>
                                        <CreatBookForm roomId={roomId} setIsBookOffering={toggleCreateBookModal} />
                                    </Modal>}
                                    <Button onClick={toggleCreateBookModal} isBgLight={true}>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É</Button>
                                </Block>
                            </Block>

                            <Badge bottom={50} text={'–õ–∏—Å—Ç–∞–π –≤–Ω–∏–∑ üëá'} air={true} left={0} right={0}/>
                        </FullScrollPage>



                        <FullScrollPage id={'section-with-drawer'}>
                            {/*<Block isAlignCenter={true}>*/}

                            <BooksCounter booksLength={books?.length} currentCounter={books?.length > 0 ? activeSlide+1 : 0} />

                            {isBooksLoaded && <>
                                <SwiperCard funcForAddCard={setIsDrawerActive} roomId={roomId} books={books} onChangeActiveSlide={setActiveSlide} />

                                {/*{!isDrawerActive &&*/}
                                {/*    <Container isWrapper={true}>*/}
                                {/*        <Button width={'100%'} bottom={20}>–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å</Button>*/}
                                {/*        <Button width={'100%'} variant={'outline'} onClick={() => setIsDrawerActive(!isDrawerActive)}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Button>*/}
                                {/*    </Container>*/}
                                {/*}*/}

                                {isDrawerActive && books?.length > 0 && isInViewport &&
                                    <Drawer
                                        onClose={setIsDrawerActive}
                                        isDrawerActive={isDrawerActive}
                                        Buttons={<>
                                            { voteViewSettingValue == 1 && <BooksCounter isVote={true} currentCounter={books[activeSlide]?.votes_count} /> }
                                            <Button width={'100%'} isBgLight={true} variant={'yellow'}>–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚úã</Button>
                                        </>}
                                    >
                                        {/*{books.map((book, index) => {*/}
                                        {/*    return (<>*/}
                                        {/*        {book.info}*/}
                                        {/*    </>)*/}
                                        {/*})}*/}
                                        <BookInfoWidget book={books[activeSlide]} />

                                        {/*{books[activeSlide].info}*/}
                                    </Drawer>
                                }
                            </>}

                            {/*</Block>*/}
                        </FullScrollPage>
                    </FullScrollPageContainer>
                }





                {/*<div className="event-page__title">{eventsInfo?.caption}</div>*/}
                {/*<TagsGroup>*/}
                {/*    <TagsItem label={'category1'}/>*/}
                {/*    <TagsItem label={'category2'}/>*/}
                {/*    <TagsItem label={'category3'}/>*/}
                {/*    <TagsItem label={'category4'}/>*/}
                {/*    <TagsItem label={'category5'}/>*/}
                {/*</TagsGroup>*/}
                {/*/!*<BookCrossing />*!/*/}
                {/*<div className="event-page-row">*/}
                {/*    <div className="event-page-block">*/}
                {/*        <div className="event-page-block__icon">*/}
                {/*            <IconLocation width={25} height={25} />*/}
                {/*        </div>*/}
                {/*        <div className="event-page-block__text">*/}
                {/*            {eventsInfo?.address}*/}
                {/*        </div>*/}
                {/*    </div>*/}
                {/*    <div className="event-page-block">*/}
                {/*        <div className="event-page-block__icon">*/}
                {/*            <IconCalendar width={25} height={25} />*/}
                {/*        </div>*/}
                {/*        <div className="event-page-block__text">*/}
                {/*            {eventsInfo?.start_date} {eventsInfo?.end_date && ' - '+eventsInfo?.end_date}*/}
                {/*        </div>*/}
                {/*    </div>*/}
                {/*</div>*/}
                {/*/!*<div className="event-page-block">*!/*/}
                {/*/!*    <div className="event-page-block__icon">*!/*/}

                {/*/!*    </div>*!/*/}
                {/*/!*    <div className="event-page-block__text">*!/*/}

                {/*/!*    </div>*!/*/}
                {/*/!*</div>*!/*/}
                {/*<div className="event-page-description">*/}
                {/*    <div className="event-page-description__title">*/}
                {/*        –û–ø–∏—Å–∞–Ω–∏–µ*/}
                {/*    </div>*/}
                {/*    <div className="event-page-description__text"*/}
                {/*         dangerouslySetInnerHTML={{ __html: toDisplayedLinkText(eventsInfo?.description) }}*/}
                {/*    >*/}
                {/*        /!*<pre>*!/*/}
                {/*        /!*    {toDisplayedLinkText(eventsInfo?.description)}*!/*/}
                {/*        /!*</pre>*!/*/}
                {/*    </div>*/}
                {/*</div>*/}
                {/*/!*<EventPageHeader />*!/*/}
            </div>
        </AppContainer>
    )
}

export default EventPage;
