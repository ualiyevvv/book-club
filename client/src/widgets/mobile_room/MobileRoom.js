import React, {useEffect, useState} from "react";
import FullScrollPage from "../../shared/ui/fullscroll/FullScrollPage";
import Block from "../../shared/ui/block/Block";
import VoteTimer from "../vote_timer/VoteTimer";
import Button from "../../shared/ui/button/Button";
import CreateBookModal from "../../features/create_book/CreateBookModal";
import Badge from "../../shared/ui/badge/Badge";
import BooksCounter from "../books_counter/BooksCounter";
import SwiperCard from "../SwiperCard/SwiperCard";
import OfferDrawer from "../offer_drawer/OfferDrawer";
import FullScrollPageContainer from "../../shared/ui/fullscroll/FullScrollPageContainer";
import useToggle from "../../hooks/useToggle";
import {useAuth} from "../../app/AuthProvider";
import VoteViewSettingButton from "../vote_view_setting_button/VoteViewSettingButton";


export default function MobileRoom({roomHash, roomData, offers=[]}) {

    const { adaptiveHandler } = useAuth();
    const { device } = adaptiveHandler;

    const [isInViewport, setIsInViewport] = useState(false);
    const [isDrawerActive, setIsDrawerActive] = useState(true)
    const [isCreateBookModal, toggleCreateBookModal] = useToggle();

    const [activeSlide, setActiveSlide] = useState(0);
    const {offerHandler} = useAuth()
    const {currentOffer} = offerHandler


    useEffect(() => {
        intersectionObserver()
        // setCurrentOffer(offers[activeSlide])
        console.log('OFFERS UPDATED')
    }, [offers]);

    useEffect(() => {
        console.log('currentOffer', currentOffer)
    }, [currentOffer])

    function intersectionObserver() {
        const observer = new IntersectionObserver(
            ([entry]) => {
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
                // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á—Ç–æ –ø–æ—Ç–æ–º –¥—Ä–∞–≤–µ—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —É—Å–ª–æ–≤–∏—è
                // –∞–∞–∞ –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Ö–æ–¥–∏—Ç, —Ç.–∫ —á–µ–∫ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø –µ–≥–æ —É–±–∏—Ä–∞–µ—Ç, –∏ –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è return –∫–æ—Ç–æ—Ä—ã–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ
                // –Ω—É–∂–Ω–æ –∑–Ω–∞—á–∏—Ç—å —á–µ–∫–Ω—É—Ç—å return –≤–Ω—É—Ç—Ä–∏ useEffect
                /// –ø–æ –∏–¥–µ–µ —Ö–æ—Ç—è, –¥—Ä–∞–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∂–µ –ø–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è, —Ç.–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–æ —Ö–∑, –Ω—É–∂–Ω–æ –¥–µ–±–∞–∂–∏—Ç—å
                // –Ω–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, —Ç.–∫ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ —ç–∫—Ä–∞–Ω–∞ –≤—Å–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —á–µ–∫–Ω—É—Ç—å, —ç—Ç–æ –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ –¥–ª—è ui –±–∏–±–ª—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–¥ –∫–ª—é—á –≤—Å–µ —á–µ—Ç–∫–æ —Ä–∞–±–æ—Ç–∞–ª–æ –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
                setIsInViewport(entry.isIntersecting);
            },
            {
                root: null, // null –æ–∑–Ω–∞—á–∞–µ—Ç viewport
                rootMargin: '0px', // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –≤–∞—à–∏ –Ω—É–∂–¥—ã
                threshold: 0.5, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            }
        );

        // –£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
        const target = document.getElementById('section-with-drawer'); // –ó–∞–º–µ–Ω–∏—Ç–µ 'your-section-id' –Ω–∞ ID –≤–∞—à–µ–π —Å–µ–∫—Ü–∏–∏
        if (target) {
            observer.observe(target);
        }

        // –û—Ç–º–µ–Ω–∏—Ç–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            if (target) {
                observer.unobserve(target);
            }
        };
    }

    useEffect(() => {
        intersectionObserver()
    }, [device]);

    return (<FullScrollPageContainer>
        <FullScrollPage>
            <Block>
                <VoteTimer data={roomData} />
            </Block>

            <Block isAlignCenter={true} bottom={30}>
                <Block maxWidth={600} isAlignCenter={true} padding={20}>
                    <VoteViewSettingButton variant={'mobile'}/>

                    {isCreateBookModal && <CreateBookModal toggle={toggleCreateBookModal} roomHash={roomHash}/>}
                    <Button onClick={toggleCreateBookModal} isBgLight={true}>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É</Button>
                </Block>
            </Block>

            <Badge bottom={50} text={'–õ–∏—Å—Ç–∞–π –≤–Ω–∏–∑ üëá'} air={true} left={0} right={0}/>
        </FullScrollPage>


        <FullScrollPage id={'section-with-drawer'}>

            <BooksCounter booksLength={offers?.length} currentCounter={offers?.length > 0 ? activeSlide+1 : 0} />

            <SwiperCard funcForAddCard={setIsDrawerActive} roomHash={roomHash} books={offers} onChangeActiveSlide={setActiveSlide} />

            {/*{!isDrawerActive &&*/}
            {/*    <Container isWrapper={true}>*/}
            {/*        <Button width={'100%'} bottom={20}>–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å</Button>*/}
            {/*        <Button width={'100%'} variant={'outline'} onClick={() => setIsDrawerActive(!isDrawerActive)}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Button>*/}
            {/*    </Container>*/}
            {/*}*/}

            {offers[activeSlide] && isDrawerActive && offers?.length > 0 && isInViewport &&
                <OfferDrawer roomHash={roomHash} isDrawerActive={isDrawerActive} setIsDrawerActive={setIsDrawerActive} offer={offers[activeSlide]}  />
            }

        </FullScrollPage>
    </FullScrollPageContainer>)
}